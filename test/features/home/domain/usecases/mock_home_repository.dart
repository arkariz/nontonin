// Mocks generated by Mockito 5.3.2 from annotations
// in nontonin/test/features/home/domain/usecases/get_newest_animes_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nontonin/core/errors/failure.dart' as _i5;
import 'package:nontonin/features/home/domain/entity/anime_entity.dart' as _i6;
import 'package:nontonin/features/home/domain/entity/drama_entity.dart' as _i7;
import 'package:nontonin/features/home/domain/entity/movie_entity.dart' as _i8;
import 'package:nontonin/features/home/domain/entity/series_entity.dart' as _i9;
import 'package:nontonin/features/home/domain/repository/home_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepository extends _i1.Mock implements _i3.HomeRepository {
  @override
  _i4.Future<
      _i2
          .Either<_i5.Failure, List<_i6.AnimeEntity>>> getNewestAnimes() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewestAnimes,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.AnimeEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.AnimeEntity>>(
          this,
          Invocation.method(
            #getNewestAnimes,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.AnimeEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.AnimeEntity>>(
          this,
          Invocation.method(
            #getNewestAnimes,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.AnimeEntity>>>);
  @override
  _i4.Future<
      _i2
          .Either<_i5.Failure, List<_i7.DramaEntity>>> getNewestDramas() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewestDramas,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i7.DramaEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i7.DramaEntity>>(
          this,
          Invocation.method(
            #getNewestDramas,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i7.DramaEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i7.DramaEntity>>(
          this,
          Invocation.method(
            #getNewestDramas,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i7.DramaEntity>>>);
  @override
  _i4.Future<
      _i2
          .Either<_i5.Failure, List<_i8.MovieEntity>>> getNewestMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewestMovies,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i8.MovieEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i8.MovieEntity>>(
          this,
          Invocation.method(
            #getNewestMovies,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i8.MovieEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i8.MovieEntity>>(
          this,
          Invocation.method(
            #getNewestMovies,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.MovieEntity>>>);
  @override
  _i4.Future<
      _i2
          .Either<_i5.Failure, List<_i9.SeriesEntity>>> getNewestSeries() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewestSeries,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i9.SeriesEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i9.SeriesEntity>>(
          this,
          Invocation.method(
            #getNewestSeries,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i9.SeriesEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i9.SeriesEntity>>(
          this,
          Invocation.method(
            #getNewestSeries,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i9.SeriesEntity>>>);
}
