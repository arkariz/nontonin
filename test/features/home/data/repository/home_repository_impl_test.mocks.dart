// Mocks generated by Mockito 5.3.2 from annotations
// in nontonin/test/features/home/data/repository/home_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nontonin/core/errors/success.dart' as _i2;
import 'package:nontonin/core/utils/internet_connection_checker.dart' as _i10;
import 'package:nontonin/features/home/data/datasources/home_local_datasource.dart'
    as _i3;
import 'package:nontonin/features/home/data/datasources/home_remote_datasourece.dart'
    as _i9;
import 'package:nontonin/features/home/data/models/anime_response.dart' as _i5;
import 'package:nontonin/features/home/data/models/drama_response.dart' as _i6;
import 'package:nontonin/features/home/data/models/movie_response.dart' as _i7;
import 'package:nontonin/features/home/data/models/series_response.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWriteSuccess_0 extends _i1.SmartFake implements _i2.WriteSuccess {
  _FakeWriteSuccess_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeLocalDataSource extends _i1.Mock
    implements _i3.HomeLocalDataSource {
  @override
  _i4.Future<List<_i5.AnimeResponse>> getNewestAnime() => (super.noSuchMethod(
        Invocation.method(
          #getNewestAnime,
          [],
        ),
        returnValue:
            _i4.Future<List<_i5.AnimeResponse>>.value(<_i5.AnimeResponse>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.AnimeResponse>>.value(<_i5.AnimeResponse>[]),
      ) as _i4.Future<List<_i5.AnimeResponse>>);
  @override
  _i4.Future<_i2.WriteSuccess> writeNewestAnime(
          List<_i5.AnimeResponse>? animes) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeNewestAnime,
          [animes],
        ),
        returnValue: _i4.Future<_i2.WriteSuccess>.value(_FakeWriteSuccess_0(
          this,
          Invocation.method(
            #writeNewestAnime,
            [animes],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.WriteSuccess>.value(_FakeWriteSuccess_0(
          this,
          Invocation.method(
            #writeNewestAnime,
            [animes],
          ),
        )),
      ) as _i4.Future<_i2.WriteSuccess>);
  @override
  _i4.Future<List<_i6.DramaResponse>> getNewestDrama() => (super.noSuchMethod(
        Invocation.method(
          #getNewestDrama,
          [],
        ),
        returnValue:
            _i4.Future<List<_i6.DramaResponse>>.value(<_i6.DramaResponse>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i6.DramaResponse>>.value(<_i6.DramaResponse>[]),
      ) as _i4.Future<List<_i6.DramaResponse>>);
  @override
  _i4.Future<_i2.WriteSuccess> writeNewestDrama(
          List<_i6.DramaResponse>? dramas) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeNewestDrama,
          [dramas],
        ),
        returnValue: _i4.Future<_i2.WriteSuccess>.value(_FakeWriteSuccess_0(
          this,
          Invocation.method(
            #writeNewestDrama,
            [dramas],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.WriteSuccess>.value(_FakeWriteSuccess_0(
          this,
          Invocation.method(
            #writeNewestDrama,
            [dramas],
          ),
        )),
      ) as _i4.Future<_i2.WriteSuccess>);
  @override
  _i4.Future<List<_i7.MovieResponse>> getNewestMovie() => (super.noSuchMethod(
        Invocation.method(
          #getNewestMovie,
          [],
        ),
        returnValue:
            _i4.Future<List<_i7.MovieResponse>>.value(<_i7.MovieResponse>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i7.MovieResponse>>.value(<_i7.MovieResponse>[]),
      ) as _i4.Future<List<_i7.MovieResponse>>);
  @override
  _i4.Future<_i2.WriteSuccess> writeNewestMovie(
          List<_i7.MovieResponse>? movies) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeNewestMovie,
          [movies],
        ),
        returnValue: _i4.Future<_i2.WriteSuccess>.value(_FakeWriteSuccess_0(
          this,
          Invocation.method(
            #writeNewestMovie,
            [movies],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.WriteSuccess>.value(_FakeWriteSuccess_0(
          this,
          Invocation.method(
            #writeNewestMovie,
            [movies],
          ),
        )),
      ) as _i4.Future<_i2.WriteSuccess>);
  @override
  _i4.Future<List<_i8.SeriesResponse>> getNewestSeries() => (super.noSuchMethod(
        Invocation.method(
          #getNewestSeries,
          [],
        ),
        returnValue:
            _i4.Future<List<_i8.SeriesResponse>>.value(<_i8.SeriesResponse>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i8.SeriesResponse>>.value(<_i8.SeriesResponse>[]),
      ) as _i4.Future<List<_i8.SeriesResponse>>);
  @override
  _i4.Future<_i2.WriteSuccess> writeNewestSeries(
          List<_i8.SeriesResponse>? series) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeNewestSeries,
          [series],
        ),
        returnValue: _i4.Future<_i2.WriteSuccess>.value(_FakeWriteSuccess_0(
          this,
          Invocation.method(
            #writeNewestSeries,
            [series],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.WriteSuccess>.value(_FakeWriteSuccess_0(
          this,
          Invocation.method(
            #writeNewestSeries,
            [series],
          ),
        )),
      ) as _i4.Future<_i2.WriteSuccess>);
}

/// A class which mocks [HomeRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRemoteDataSource extends _i1.Mock
    implements _i9.HomeRemoteDataSource {
  @override
  _i4.Future<List<_i5.AnimeResponse>> getNewestAnime() => (super.noSuchMethod(
        Invocation.method(
          #getNewestAnime,
          [],
        ),
        returnValue:
            _i4.Future<List<_i5.AnimeResponse>>.value(<_i5.AnimeResponse>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.AnimeResponse>>.value(<_i5.AnimeResponse>[]),
      ) as _i4.Future<List<_i5.AnimeResponse>>);
  @override
  _i4.Future<List<_i6.DramaResponse>> getNewestDrama() => (super.noSuchMethod(
        Invocation.method(
          #getNewestDrama,
          [],
        ),
        returnValue:
            _i4.Future<List<_i6.DramaResponse>>.value(<_i6.DramaResponse>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i6.DramaResponse>>.value(<_i6.DramaResponse>[]),
      ) as _i4.Future<List<_i6.DramaResponse>>);
  @override
  _i4.Future<List<_i7.MovieResponse>> getNewestMovie() => (super.noSuchMethod(
        Invocation.method(
          #getNewestMovie,
          [],
        ),
        returnValue:
            _i4.Future<List<_i7.MovieResponse>>.value(<_i7.MovieResponse>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i7.MovieResponse>>.value(<_i7.MovieResponse>[]),
      ) as _i4.Future<List<_i7.MovieResponse>>);
  @override
  _i4.Future<List<_i8.SeriesResponse>> getNewestSeries() => (super.noSuchMethod(
        Invocation.method(
          #getNewestSeries,
          [],
        ),
        returnValue:
            _i4.Future<List<_i8.SeriesResponse>>.value(<_i8.SeriesResponse>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i8.SeriesResponse>>.value(<_i8.SeriesResponse>[]),
      ) as _i4.Future<List<_i8.SeriesResponse>>);
}

/// A class which mocks [InternetConnection].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnection extends _i1.Mock
    implements _i10.InternetConnection {
  @override
  _i4.Future<bool> hasConnection() => (super.noSuchMethod(
        Invocation.method(
          #hasConnection,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
